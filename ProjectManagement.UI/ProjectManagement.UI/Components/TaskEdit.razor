@inject ProjectManagement.Clients.ProjectTaskClient _taskClient
@using ProjectManagement.Classes

<div class="container">
    <div class="buttons">
        <button type="button" class="no-style" @onclick="HandleClose">x</button>
    </div>
    <div>
        <InputText @bind-Value=@(Task.Title) placeholder="Title..."></InputText>
    </div>
    <div>
        <label for="taskName">Task Status:</label>
        <InputSelect @bind-Value=@(Task.Status)>
            @if (Task.Status == null)
            {
                <option disabled selected>Select...</option>
            }
            @foreach(Enumeration.ProjectTaskStatus status in Enumeration.ProjectTaskStatus.GetValues(typeof(Enumeration.ProjectTaskStatus)))
            {
                if(status != Enumeration.ProjectTaskStatus.NotSet)
                {
                    <option value="@status">@status.GetDisplayNameString()</option>
                }
            }
        </InputSelect>
    </div>
    <div>
        <label for="taskName">Task Description:</label>
        <InputTextArea class="taskDescription" @bind-Value="Task.Description"></InputTextArea>
    </div>
    <button type="button" class="btn btn-lg btn-success" @onclick=@(HandleSubmit)>Save</button>
</div>

@code {
    [Parameter]
    public Action CloseCallback { get; set; } = null!;
    [Parameter]
    public ProjectManagement.Public.Models.ProjectTaskViewModel Task { get; set; } = new();
    [Parameter]
    public Func<ProjectTaskViewModel, Task> SaveCallback { get; set; } = null!;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }
    private async Task HandleSubmit()
    {
        await SaveCallback.Invoke(Task);
    }
    private async Task HandleClose()
    {
        await InvokeAsync(CloseCallback);
    }
}
