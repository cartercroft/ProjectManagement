@inject ProjectManagement.Clients.ProjectTaskClient _taskClient

<div class="container">
    <div class="buttons">
        <button type="button" class="no-style" @onclick="HandleClose">x</button>
    </div>
    <div>
        <InputText @bind-Value=@(Task.Title) placeholder="Title..."></InputText>
    </div>
    <div>
        <label for="taskName">Task Status:</label>
        <InputSelect @bind-Value=@(Task.Status)>
            @if (string.IsNullOrEmpty(Task.Status))
            {
                <option disabled selected>Select...</option>
            }
            @foreach(string status in StatusList)
            {
                <option value="@status">@status</option>
            }
        </InputSelect>
    </div>
    <div>
        <label for="taskName">Task Description:</label>
        <InputTextArea class="taskDescription" @bind-Value="Task.Description"></InputTextArea>
    </div>
    <button type="button" class="btn btn-lg btn-success" @onclick=@(HandleSubmit)>Save</button>
</div>

@code {
    private List<string> StatusList = null!;
    [Parameter]
    public Action CloseCallback { get; set; } = null!;
    [Parameter]
    public ProjectManagement.Public.Models.ProjectTaskViewModel Task { get; set; } = new();
    [Parameter]
    public Func<ProjectTaskViewModel, Task> SaveCallback { get; set; } = null!;
    protected override async Task OnInitializedAsync()
    {
        if(StatusList == null)
        {
            StatusList = new List<string>();
            foreach(var status in Enum.GetNames(typeof(TaskStatus)))
            {
                StatusList.Add(status);
            }
        }
        await base.OnInitializedAsync();
    }
    private async Task HandleStatusChange(EventArgs args)
    {
        Task.Status = args.ToString();
        await InvokeAsync(StateHasChanged);
    }
    private async Task HandleSubmit()
    {
        await SaveCallback.Invoke(Task);
    }
    private async Task HandleClose()
    {
        await InvokeAsync(CloseCallback);
    }
    private enum TaskStatus
    {
        ToDo,
        InProgress,
        Completed
    }
}
