@page "/Login"
@using ProjectManagement.Classes
@using ProjectManagement.Public.Models.Auth
@inherits ProjectManagementComponentBase
@inject AuthenticationStateProvider _authStateProvider
@inject NavigationManager _navManager
<div class="login-wrapper">
    <form class="login-form" @onsubmit=@(HandleSubmit)>
        <h3>@(_isRegistering ? "Create your account!" : "Log In")</h3>
        <div>
            <label>
                Email:
            </label>
            <InputText @bind-Value=@(_loginModel.Username)/>
        </div>
        <div>
            <label>
                Password:
            </label>
            <InputText @bind-Value=@(_loginModel.Password) AdditionalAttributes=@(new Dictionary<string, object>(){["type"] = "password"}) />
        </div>
        <button type="submit">@(_isRegistering ? "Submit" : "Log In")</button>
        @if(!_isRegistering)
        {
            <button type="button" @onclick=@(HandleRegisterClick)>Register</button>
            <button class="no-style " @onclick=@(HandleBackToLoginClick)></button>
        }
    </form>
</div>

@code{
    private LoginModel _loginModel = new();
    private bool _isRegistering = false;
    protected override async Task OnInitializedAsync()
    {
        _loginModel = new();
        await base.OnInitializedAsync();
    }
    private async Task HandleSubmit(EventArgs args)
    {
        if(_isRegistering)
        {
            await HandleRegister();
        }
        else
        {
            await HandleLogin();
        }
    }
    private async Task HandleLoginClick(MouseEventArgs args)
    {
        await HandleSubmit(args);
    }
    private void HandleRegisterClick(MouseEventArgs args)
    {
        _isRegistering = true;
    }
    private void HandleBackToLoginClick(MouseEventArgs args)
    {
        _isRegistering = false;
    }
    private async Task HandleRegister() 
    {
        var response = await ((ILoginManager)_authStateProvider).Register(_loginModel);
        if(response.IsSuccess)
        {
            ShowSuccess("Successfully registered!");
        }
        else
        {
            HandleError($"Error registering: {response.ErrorMessage}");
        }
    }
    private async Task HandleLogin() 
    {
        ShowInfo("Logging in...");
        bool isLoginSuccess = await ((ILoginManager)_authStateProvider).Login(_loginModel);
        if (isLoginSuccess)
        {
            ShowSuccess("Logged in!");
            _navManager.NavigateTo("/Projects");
        }
        else
        {
            ShowWarning("Invalid username or password.");
        }
    }
}