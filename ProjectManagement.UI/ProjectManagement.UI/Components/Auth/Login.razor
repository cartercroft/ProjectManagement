@page "/Login"
@using ProjectManagement.Classes
@inherits ProjectManagementComponentBase
@inject AuthenticationStateProvider _authStateProvider
@inject NavigationManager _navManager
<div class="login-wrapper">
    <form class="login-form" @onsubmit=@(HandleLogin)>
        <div>
            <label>
                Email:
            </label>
            <InputText @bind-Value=@(_loginModel.Username)/>
        </div>
        <div>
            <label>
                Password:
            </label>
            <InputText @bind-Value=@(_loginModel.Password) AdditionalAttributes=@(new Dictionary<string, object>(){["type"] = "password"}) />
        </div>
        <button type="submit">Log In</button>
        <button type="button" @onclick=@(NavigateToRegister)>Register</button>
    </form>
</div>

@code{
    private class UserLoginModel {
        public string Username { get; set; }
        public string Password { get; set; }
    }
    private UserLoginModel _loginModel;

    protected override async Task OnInitializedAsync()
    {
        _loginModel = new();
        await base.OnInitializedAsync();
    }
    private async Task HandleLogin(EventArgs args)
    {
        ShowInfo("Logging in...");
        bool isLoginSuccess = await ((ILoginManager)_authStateProvider).Login(_loginModel.Username, _loginModel.Password);
        if (isLoginSuccess)
        {
            ShowSuccess("Logged in!");
            _navManager.NavigateTo("/Projects");
        }
        else
        {
            ShowWarning("Invalid username or password.");
        }
    }
    private async Task HandleLoginClick(MouseEventArgs args)
    {
        await HandleLogin(args);
    }
    private void NavigateToRegister(MouseEventArgs args)
    {
        _navManager.NavigateTo("/Register");
    }
}