@using ProjectManagement.Classes
@inject ProjectClient _client

<div class="project-edit-container">

    <div>
        <label>Project Name:</label>
        <InputText @bind-Value=@(Project.Name) />
    </div>
    <div class="tasks">
        @foreach (var entry in _tasksByStatus)
        {
            <div class="task-section">
                <div class="task-section-header">@entry.Key</div>
                <div class="task-list">
                    @foreach (var task in entry.Value)
                    {
                        <button type="button" class="task-detail no-style" @onclick=@(() => OpenProjectTask(task))>
                            @task.Title
                        </button>
                    }
                </div>
            </div>
        }
    </div>
    <button type="button" @onclick=@(HandleSaveClick)>Save</button>
    <button type="button" @onclick=@(HandleTaskAdd)>Add Task</button>
</div>

@if (_isTaskEditOpen)
{
    <TaskEdit SaveCallback="TaskSaveCallback" CloseCallback=@(() => CloseTaskEditForm()) Task="_focusedTask"></TaskEdit>
}
@code {


    [Parameter]
    public ProjectViewModel Project { get; set; } = null!;
    [Parameter]
    public Func<ProjectViewModel, Task> SaveCallback { get; set; } = null!;

    private bool _isTaskEditOpen = false;
    private ProjectTaskViewModel _focusedTask = null;

    private Dictionary<string, List<ProjectTaskViewModel>> _tasksByStatus = null!;

    protected override async Task OnInitializedAsync()
    {
        if (Project == null)
        {
            Project = new ProjectViewModel();
        }

        if (_tasksByStatus == null)
        {
            _tasksByStatus = new();

            foreach (ProjectTaskStatus status in Enum.GetValues(typeof(ProjectTaskStatus)))
            {
                if(status != ProjectTaskStatus.NotSet)
                {
                    var list = Project.Tasks.Where(t => t.Status == status).ToList();
                    _tasksByStatus.Add(status.GetDisplayNameString(), list);
                }
            }
        }
        await base.OnInitializedAsync();
    }
    protected internal async Task TaskSaveCallback(ProjectTaskViewModel viewModel)
    {
        if (viewModel.Id <= 0)
        {
            Project.Tasks.Add(viewModel);
            _tasksByStatus[viewModel.Status.GetDisplayNameString()].Add(viewModel);
        }
        _isTaskEditOpen = false;
        await InvokeAsync(StateHasChanged);
    }
    internal async Task HandleSaveClick(MouseEventArgs args)
    {
        await _client.Save(Project);
        await SaveCallback.Invoke(Project);
    }
    internal async Task OpenProjectTask(ProjectTaskViewModel viewModel)
    {
        _focusedTask = viewModel;
        _isTaskEditOpen = true;
    }
    internal async Task CloseTaskEditForm()
    {
        _focusedTask = null;
        _isTaskEditOpen = false;
        await InvokeAsync(StateHasChanged);
    }
    internal async Task HandleTaskAdd(MouseEventArgs args)
    {
        _isTaskEditOpen = true;
        _focusedTask = new ProjectTaskViewModel();
        await InvokeAsync(StateHasChanged);
    }
}
