@page "/"
@inject ProjectClient _projectClient

<PageTitle>Home</PageTitle>
@if (IsLoading)
{
    <p>Loading...</p>
}
else
{
    <div style="padding: 10px;" @key=@(ForceRefresh)>
        <TypedTabDisplay TTabItem="ProjectViewModel" EnableAdding OnAddAsync="HandleProjectAdd" EnableDelete OnDeleteAsync="HandleProjectDelete">
            @foreach(var project in Projects)
            {
                <TypedTabPage TabItem="project" Text="@project.Name" @key="@project.Id">
                    <ProjectEdit Project="@project" SaveCallback="Refresh"></ProjectEdit>
                </TypedTabPage>
            }
        </TypedTabDisplay>
    </div>
}

<ProjectEditDialog @bind-Opened=@(DialogOpened) SaveCallback="Refresh"></ProjectEditDialog>
@code{
    private List<ProjectViewModel> Projects = new();
    private bool DialogOpened = false;
    private bool IsLoading = false;
    private bool ForceRefresh = false;
    protected override async Task OnInitializedAsync()
    {
        await GetProjects();
    }
    private async Task GetProjects()
    {
        IsLoading = true;
        var result = await _projectClient.GetAll();
        if (result.IsSuccess)
        {
            Projects = result.Result;
        }
        else
        {
            throw new Exception(result.ErrorMessage);
        }
        IsLoading = false;
    }
    private async Task HandleProjectAdd() {
        DialogOpened = true;
        await InvokeAsync(StateHasChanged);
    }
    private async Task HandleProjectDelete(ProjectViewModel viewModel)
    {
        await _projectClient.Delete(viewModel);
        await Refresh();
    }
    private async Task Refresh()
    {
        ForceRefresh = !ForceRefresh;
        await GetProjects();
        await InvokeAsync(StateHasChanged);
    }
}