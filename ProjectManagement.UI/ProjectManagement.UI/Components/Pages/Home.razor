@page "/"
@page "/Projects"
@using Microsoft.AspNetCore.Authorization
@inject ProjectClient _projectClient
@inherits AuthorizedComponentBase

<PageTitle>My Projects</PageTitle>

@if (_isLoading)
{
    <p>Loading...</p>
}
else
{
    <div style="padding: 10px;" @key=@(Projects.Count)>
        <a href="/Roles">Roles</a>
        <TypedTabDisplay TTabItem="ProjectViewModel" EnableAdding OnAddAsync="HandleOpenProjectEdit" EnableDelete OnDeleteAsync="HandleDeleteDialogOpen">
            @foreach (var project in Projects)
            {
                <TypedTabPage TabItem="project" Text="@project.Name">
                    <ProjectEdit Project="@project" SaveCallback="HandleProjectEdit"></ProjectEdit>
                </TypedTabPage>
            }
        </TypedTabDisplay>
    </div>
}

<ProjectAddDialog @bind-Opened=@(_editDialogOpened) SaveCallback="HandleProjectAdd"></ProjectAddDialog>
<ProjectDeleteDialog Project="@_projectToDelete" @bind-Opened=@(_deleteDialogOpened) DeleteCallback="HandleProjectDelete"></ProjectDeleteDialog>

@code {
    [Parameter]
    public List<ProjectViewModel> Projects { get; set; } = new();
    private bool _editDialogOpened = false;
    private bool _isLoading = false;
    private bool _deleteDialogOpened = false;
    private ProjectViewModel _projectToDelete = null!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await GetProjects();
    }
    private async Task GetProjects()
    {
        _isLoading = true;
        var result = await _projectClient.GetAll();
        if (result.IsSuccess)
        {
            Projects = result.Result ?? new List<ProjectViewModel>();
        }
        else
        {
            HandleError($"Error: {result.ErrorMessage}");
        }
        _isLoading = false;
    }
    private async Task HandleOpenProjectEdit()
    {
        _editDialogOpened = true;
        await InvokeAsync(StateHasChanged);
    }
    private async Task HandleProjectEdit(ProjectViewModel viewModel)
    {
        if (viewModel.Id == 0)
        {
            await HandleProjectAdd(viewModel);
        }
        else
        {
            int index = Projects.FindIndex(p => p.Id == viewModel.Id);
            Projects[index] = viewModel;
        }
    }
    private async Task HandleProjectAdd(ProjectViewModel viewModel)
    {
        Projects.Add(viewModel);
        await InvokeAsync(StateHasChanged);
    }
    private async Task HandleDeleteDialogOpen(ProjectViewModel projectViewModel)
    {
        _deleteDialogOpened = true;
        _projectToDelete = projectViewModel;
        await InvokeAsync(StateHasChanged);
    }
    private async Task HandleProjectDelete(ProjectViewModel viewModel)
    {
        Projects.Remove(viewModel);
        var response = await _projectClient.Delete(viewModel);
        if (!response.IsSuccess)
        {
            Projects.Add(viewModel);
            HandleError($"Error deleting project: {response.ErrorMessage}");
        }
        await InvokeAsync(StateHasChanged);
    }
}