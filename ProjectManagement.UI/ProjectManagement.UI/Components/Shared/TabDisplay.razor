@namespace ProjectManagement.UI.Components.Shared

<div class="tab-wrapper">
    <div class="tabs">
        @foreach (TabPage tabPage in Pages)
          {
            <button type="button"
              class="@GetButtonClass(tabPage) no-style"
              @onclick=@(() => ActivatePage(tabPage))>
              @tabPage.Text
            </button>
          }
    </div>
    @if (EnableAdding)
    {
        <button type="button"
                class="button_plus"
                @onclick=@(HandleAddClick)></button>
    }
    <div class="content">
        <CascadingValue Value="this">
            @ChildContent
        </CascadingValue>
    </div>
</div>

@code {
    [Parameter]
    public bool EnableAdding { get; set; } = false;
    [Parameter]
    public Action OnAdd { get; set; } = null!;
    [Parameter]
    public Func<Task> OnAddAsync { get; set; } = null!;
    // Next line is needed so we are able to add <TabPage> components inside
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    public TabPage ActivePage { get; set; }
    List<TabPage> Pages = new List<TabPage>();

    protected override async Task OnInitializedAsync()
    {
        if(EnableAdding 
            && OnAdd == null
            && OnAddAsync == null)
        {
            throw new ArgumentNullException("Either parameter OnAdd or OnAddAsync must be provided to TabDisplay when EnableAdding is set to true.");
        }
        if(OnAdd != null && OnAddAsync != null)
        {
            throw new ArgumentException("Only one of OnAdd or OnAddAsync can be provided to TabDisplay. To fix this, remove either OnAdd OR OnAddAsync.");
        }
        await base.OnInitializedAsync();
    }
    internal async Task HandleAddClick(MouseEventArgs args)
    {
        if(OnAdd != null)
        {
            await InvokeAsync(OnAdd);
        }
        else
        {
            await InvokeAsync(OnAddAsync);
        }
    }
    internal string GetButtonClass(TabPage page)
    {
        return page == ActivePage ? "active" : "";
    }
    internal void ActivatePage(TabPage page)
    {
        ActivePage = page;
    }
    internal void AddPage(TabPage tabPage)
    {
        Pages.Add(tabPage);
        if (Pages.Count == 1)
            ActivePage = tabPage;
        StateHasChanged();
    }
}