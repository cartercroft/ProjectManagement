@typeparam TTabItem
@namespace ProjectManagement.UI.Components.Shared

<div class="tab-wrapper">
    <div class="tabs">
        @foreach (TypedTabPage<TTabItem> tabPage in Pages)
        {
            <button type="button"
                    class="@GetButtonClass(tabPage) no-style"
                    @onclick=@(() => ActivatePage(tabPage))>
                @tabPage.Text
                <span class="delete" @onclick=@(() => HandleDeleteClick(tabPage.TabItem))>x</span>
            </button>
        }
    </div>
    @if (EnableAdding)
    {
        <button type="button"
                class="button_plus"
                @onclick=@(HandleAddClick)></button>
    }
    <div class="content">
        <CascadingValue Value="this">
            @ChildContent
        </CascadingValue>
    </div>
</div>

@code {
    [Parameter]
    public bool EnableAdding { get; set; } = false;
    [Parameter]
    public bool EnableDelete { get; set; } = false;
    [Parameter]
    public Action OnAdd { get; set; } = null!;
    [Parameter]
    public Func<Task> OnAddAsync { get; set; } = null!;
    [Parameter]
    public Func<TTabItem, object> OnDelete { get; set; } = null!;
    [Parameter]
    public Func<TTabItem, Task> OnDeleteAsync { get; set; } = null!;
    [Parameter]
    public RenderFragment ChildContent { get; set; } = null!;

    public TypedTabPage<TTabItem> ActivePage { get; set; } = null!;
    List<TypedTabPage<TTabItem>> Pages = new List<TypedTabPage<TTabItem>>();

    protected override async Task OnInitializedAsync()
    {
        if (EnableAdding
            && OnAdd == null
            && OnAddAsync == null)
        {
            throw new ArgumentNullException("Either parameter OnAdd or OnAddAsync must be provided to TabDisplay when EnableAdding is set to true.");
        }
        if (OnAdd != null && OnAddAsync != null)
        {
            throw new ArgumentException("Only one of OnAdd or OnAddAsync can be provided to TabDisplay. To fix this, remove either OnAdd OR OnAddAsync.");
        }

        await base.OnInitializedAsync();
    }
    internal async Task HandleAddClick(MouseEventArgs args)
    {
        if (OnAdd != null)
        {
            await InvokeAsync(OnAdd);
        }
        else
        {
            await InvokeAsync(OnAddAsync);
        }
        await InvokeAsync(StateHasChanged);
    }
    internal async Task HandleDeleteClick(TTabItem tabItem)
    {
        if (OnDelete != null)
        {
            OnDelete.Invoke(tabItem);
        }
        else
        {
            await OnDeleteAsync.Invoke(tabItem);
        }
        await InvokeAsync(StateHasChanged);
    }
    internal string GetButtonClass(TypedTabPage<TTabItem> page)
    {
        return page == ActivePage ? "active" : "";
    }
    internal void ActivatePage(TypedTabPage<TTabItem> page)
    {
        ActivePage = page;
    }
    internal void AddPage(TypedTabPage<TTabItem> tabPage)
    {
        Pages.Add(tabPage);
        if (Pages.Count == 1)
            ActivePage = tabPage;
        StateHasChanged();
    }
}